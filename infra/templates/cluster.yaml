Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
  ClusterSize:
    Type: Number
    Default: 2
  VpcId:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  SourceSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

Mappings:
  RegionToAmi:
    us-east-1:
      Ami: ami-275ffe31
    us-east-2:
      Ami: ami-62745007
    us-west-1:
      Ami: ami-689bc208
    us-west-2:
      Ami: ami-62d35c02
    eu-west-1:
      Ami: ami-95f8d2f3
    eu-west-2:
      Ami: ami-bf9481db
    eu-central-1:
      Ami: ami-085e8a67
    ap-northeast-1:
      Ami: ami-f63f6f91
    ap-southeast-1:
      Ami: ami-b4ae1dd7
    ap-southeast-2:
      Ami: ami-fbe9eb98
    ca-central-1:
      Ami: ami-ee58e58a

Resources:
  EcsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ecs-${AWS::StackName}
      AssumeRolePolicyDocument: |
        {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "ec2.amazonaws.com" },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EcsRole
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-hosts
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SourceSecurityGroup
          IpProtocol: -1
      VpcId: !Ref VpcId
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${Cluster} > /etc/ecs/ecs.config
          files:
            /etc/cfn/cfn-hup.conf:
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap [ RegionToAmi, !Ref "AWS::Region", Ami ]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      DesiredCapacity: !Ref ClusterSize
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} - ECS Host
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourcesSignals: true

Outputs:
  ClusterName:
    Value: !Ref Cluster
